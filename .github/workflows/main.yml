name: CI

on: [push]

jobs:
 sast_scan:
  name: Run Bandit Scan
  runs-on: ubuntu-latest

  steps:
  - name: Checkout Code
    uses: actions/checkout@v2

  - name: Setup Python
    uses: actions/setup-python@v2
    with:
      python-version: 3.8

  - name: Install Bandit
    run: pip install bandit

  - name: Run bandit Scan
    run: bandit -r -ll -ii . -f json -o bandit-report.json

  - name: Upload Artifacts
    uses: actions/upload-artifact@v4
    if: always()
    with:
      name: bandit-findings
      path: bandit-report.json

 image_scan:
  name: Build image and run container scan
  runs-on: ubuntu-latest

  steps:
   - name: Checkout Code
     uses: actions/checkout@v2

   - name: Setup Docker
     uses: docker-practice/actions-setup-docker@v1
     with:
      docker_version: '20.10.7'

   - name: Build docker Image
     run: docker build -f Dockerfile -t myapp:latest .

   - name: Docker scout scan
     run: |
      curl -fsSL https://raw.githubusercontent.com/docker/scout-cli/main/install.sh -o install-scout.sh
      sh install-scout.sh
      echo ${{secrets.DOCKER_PASS}} | docker login -u ${{secrets.DOCKER_USER}} --password-stdin
      docker scout quickview
      docker scout cves --only-severity critical,high --format sarif -o scout-report.sarif --exit-code true

   - name: Upload Artifacts
     uses: actions/upload-artifact@v4
     if: always()
     with:
      name: Docker Scout Findings
      path: scout-report.sarif

 Upload_scans_to_dojo:
  name: Upload scans to defectdojo
  runs-on: ubuntu-latest
  needs: 
      - sast_scan
  if: always()
  
  steps:
  - name: Create Product in DefectDojo
    id: create_product
    env:
         DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
         DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
    run: |
         sudo apt-get install -y jq
         PRODUCT_NAME="My Product $(date +'%Y-%m-%d %H:%M:%S')"
         RESPONSE=$(curl -s -X POST "$DEFECTDOJO_URL/api/v2/products/" \
           -H "Authorization: Token $DEFECTDOJO_API_KEY" \
           -H "Content-Type: application/json" \
           -d "{\"name\": \"$PRODUCT_NAME\", \"description\": \"Auto-created product\"}")
         echo "$RESPONSE"
         PRODUCT_ID=$(echo "$RESPONSE" | jq -r '.id')
         echo "::set-output name=product_id::$PRODUCT_ID"
         echo "::set-output name=product_name::$PRODUCT_NAME"
         
  - name: Create Engagement in DefectDojo
    id: create_engagement
    env:
     DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
     DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
    run: |
         ENGAGEMENT_NAME="Automated Engagement $(date +'%Y-%m-%d %H:%M:%S')"
         START_DATE=$(date +'%Y-%m-%d')
         END_DATE=$(date -d "+7 days" +'%Y-%m-%d')
         PRODUCT_ID=${{ steps.create_product.outputs.product_id }}
         RESPONSE=$(curl -s -X POST "$DEFECTDOJO_URL/api/v2/engagements/" \
           -H "Authorization: Token $DEFECTDOJO_API_KEY" \
           -H "Content-Type: application/json" \
           -d "{\"name\": \"$ENGAGEMENT_NAME\", \"product\": $PRODUCT_ID, \"target_start\": \"$START_DATE\", \"target_end\": \"$END_DATE\", \"active\": true, \"status\": \"In Progress\"}")
         echo "$RESPONSE"
         ENGAGEMENT_ID=$(echo "$RESPONSE" | jq -r '.id')
         echo "::set-output name=engagement_id::$ENGAGEMENT_ID"
         echo "::set-output name=engagement_name::$ENGAGEMENT_NAME"
 
  - name: Upload Report to DefectDojo
    env:
     DEFECTDOJO_URL: ${{ secrets.DEFECTDOJO_URL }}
     DEFECTDOJO_API_KEY: ${{ secrets.DEFECTDOJO_API_KEY }}
    run: |
         REPORT_FILE=$(find . -type f -name "*.json" | head -n 1)
         ENGAGEMENT_ID=${{ steps.create_engagement.outputs.engagement_id }}
         curl -X POST "$DEFECTDOJO_URL/api/v2/import-scan/" \
           -H "Authorization: Token $DEFECTDOJO_API_KEY" \
           -H "Content-Type: multipart/form-data" \
           -F "scan_type=My Scan Type" \
           -F "file=@$REPORT_FILE" \
           -F "engagement=$ENGAGEMENT_ID"
